%{
  from gyb_utils import (
    autogenerated_warning, requestBodyProtocols, responseBodyProtocols)
}%
${autogenerated_warning()}

import Foundation

extension Networking {

  @inlinable
  @discardableResult
  public func executeRaw<E>(_ endpoint: E, completion: @escaping (RawResult) -> Void) throws -> Task where E: Endpoint, E.RequestBody == Void {
    execute(try request(endpoint), completion: completion)
  }

  % for requestBodyProtocol in requestBodyProtocols:

  @inlinable
  @discardableResult
  public func executeRaw<E>(_ endpoint: E, completion: @escaping (RawResult) -> Void) throws -> Task where E: Endpoint, E.RequestBody: ${requestBodyProtocol} {
    execute(try request(endpoint), completion: completion)
  }
  
  % for responseBodyProtocol in responseBodyProtocols:
  @inlinable
  @discardableResult
  public func execute<E>(_ endpoint: E, completion: @escaping (EndpointResult<E>) -> Void) throws -> Task where E: Endpoint, E.RequestBody: ${requestBodyProtocol}, E.ResponseBody: ${responseBodyProtocol} {
    try executeRaw(endpoint) { result in
      completion(result.map { rawResponse in
        (response: rawResponse.response, body: .init(catching: {try self.decode(endpoint, body: rawResponse.body)}))
      })
    }
  }
  % end
  % end

  % for responseBodyProtocol in responseBodyProtocols:
  @inlinable
  @discardableResult
  public func execute<E>(_ endpoint: E, completion: @escaping (EndpointResult<E>) -> Void) throws -> Task where E: Endpoint, E.RequestBody == Void, E.ResponseBody: ${responseBodyProtocol} {
    try executeRaw(endpoint) { result in
      completion(result.map { rawResponse in
        (response: rawResponse.response, body: .init(catching: {try self.decode(endpoint, body: rawResponse.body)}))
      })
    }
  }

  % end
}

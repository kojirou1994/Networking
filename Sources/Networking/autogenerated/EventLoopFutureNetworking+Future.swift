
// #############################################################################
// #                                                                           #
// #            DO NOT EDIT THIS FILE; IT IS AUTOGENERATED.                    #
// #                                                                           #
// #############################################################################


import Foundation
import NIO

extension EventLoopFutureNetworking {

  @inlinable
  public func rawFuture<E>(_ endpoint: E) -> EventLoopFuture<RawResponse> where E: Endpoint {
    do {
      return rawFuture(try request(endpoint))
    } catch {
      return eventLoop.makeFailedFuture(error)
    }
  }

  public func decodedFuture<E>(_ endpoint: E) -> EventLoopFuture<EndpointResponse<E>> where Self: Sendable, E: Endpoint & Sendable, E.ResponseBody: Decodable {
    rawFuture(endpoint)
      .flatMapThrowing { rawResponse -> EndpointResponse<E> in
        try endpoint.validate(networking: self, response: rawResponse)
        guard let body = rawResponse.body else {
          throw NetworkingError.emptyBody
        }
        return (
          rawResponse.response,
          self.decode(contentType: endpoint.acceptType, body: body)
        )
      }
  }
  
  public func decodedFuture<E>(_ endpoint: E) -> EventLoopFuture<EndpointResponse<E>> where Self: Sendable, E: Endpoint & Sendable, E.ResponseBody: CustomResponseBody {
    rawFuture(endpoint)
      .flatMapThrowing { rawResponse -> EndpointResponse<E> in
        try endpoint.validate(networking: self, response: rawResponse)
        guard let body = rawResponse.body else {
          throw NetworkingError.emptyBody
        }
        return (
          rawResponse.response,
          self.decode(body: body)
        )
      }
  }
  
}


// #############################################################################
// #                                                                           #
// #            DO NOT EDIT THIS FILE; IT IS AUTOGENERATED.                    #
// #                                                                           #
// #############################################################################


import Foundation

extension Networking {

  @inlinable
  @discardableResult
  public func executeRaw<E>(_ endpoint: E, completion: @escaping (RawResult) -> Void) throws -> Task where E: Endpoint, E.RequestBody == Void {
    execute(try request(endpoint), completion: completion)
  }


  @inlinable
  @discardableResult
  public func executeRaw<E>(_ endpoint: E, completion: @escaping (RawResult) -> Void) throws -> Task where E: Endpoint, E.RequestBody: Encodable {
    execute(try request(endpoint), completion: completion)
  }
  
  @inlinable
  @discardableResult
  public func execute<E>(_ endpoint: E, completion: @escaping (EndpointResult<E>) -> Void) throws -> Task where E: Endpoint, E.RequestBody: Encodable, E.ResponseBody: Decodable {
    try executeRaw(endpoint) { result in
      completion(result.map { rawResponse in
        .init(response: rawResponse.response, body: .init(catching: {try self.decode(endpoint, body: rawResponse.body)}))
      })
    }
  }
  @inlinable
  @discardableResult
  public func execute<E>(_ endpoint: E, completion: @escaping (EndpointResult<E>) -> Void) throws -> Task where E: Endpoint, E.RequestBody: Encodable, E.ResponseBody: CustomResponseBody {
    try executeRaw(endpoint) { result in
      completion(result.map { rawResponse in
        .init(response: rawResponse.response, body: .init(catching: {try self.decode(endpoint, body: rawResponse.body)}))
      })
    }
  }

  @inlinable
  @discardableResult
  public func executeRaw<E>(_ endpoint: E, completion: @escaping (RawResult) -> Void) throws -> Task where E: Endpoint, E.RequestBody: MultipartRequestBody {
    execute(try request(endpoint), completion: completion)
  }
  
  @inlinable
  @discardableResult
  public func execute<E>(_ endpoint: E, completion: @escaping (EndpointResult<E>) -> Void) throws -> Task where E: Endpoint, E.RequestBody: MultipartRequestBody, E.ResponseBody: Decodable {
    try executeRaw(endpoint) { result in
      completion(result.map { rawResponse in
        .init(response: rawResponse.response, body: .init(catching: {try self.decode(endpoint, body: rawResponse.body)}))
      })
    }
  }
  @inlinable
  @discardableResult
  public func execute<E>(_ endpoint: E, completion: @escaping (EndpointResult<E>) -> Void) throws -> Task where E: Endpoint, E.RequestBody: MultipartRequestBody, E.ResponseBody: CustomResponseBody {
    try executeRaw(endpoint) { result in
      completion(result.map { rawResponse in
        .init(response: rawResponse.response, body: .init(catching: {try self.decode(endpoint, body: rawResponse.body)}))
      })
    }
  }

  @inlinable
  @discardableResult
  public func executeRaw<E>(_ endpoint: E, completion: @escaping (RawResult) -> Void) throws -> Task where E: Endpoint, E.RequestBody: StreamRequestBody {
    execute(try request(endpoint), completion: completion)
  }
  
  @inlinable
  @discardableResult
  public func execute<E>(_ endpoint: E, completion: @escaping (EndpointResult<E>) -> Void) throws -> Task where E: Endpoint, E.RequestBody: StreamRequestBody, E.ResponseBody: Decodable {
    try executeRaw(endpoint) { result in
      completion(result.map { rawResponse in
        .init(response: rawResponse.response, body: .init(catching: {try self.decode(endpoint, body: rawResponse.body)}))
      })
    }
  }
  @inlinable
  @discardableResult
  public func execute<E>(_ endpoint: E, completion: @escaping (EndpointResult<E>) -> Void) throws -> Task where E: Endpoint, E.RequestBody: StreamRequestBody, E.ResponseBody: CustomResponseBody {
    try executeRaw(endpoint) { result in
      completion(result.map { rawResponse in
        .init(response: rawResponse.response, body: .init(catching: {try self.decode(endpoint, body: rawResponse.body)}))
      })
    }
  }

  @inlinable
  @discardableResult
  public func executeRaw<E>(_ endpoint: E, completion: @escaping (RawResult) -> Void) throws -> Task where E: Endpoint, E.RequestBody: CustomRequestBody {
    execute(try request(endpoint), completion: completion)
  }
  
  @inlinable
  @discardableResult
  public func execute<E>(_ endpoint: E, completion: @escaping (EndpointResult<E>) -> Void) throws -> Task where E: Endpoint, E.RequestBody: CustomRequestBody, E.ResponseBody: Decodable {
    try executeRaw(endpoint) { result in
      completion(result.map { rawResponse in
        .init(response: rawResponse.response, body: .init(catching: {try self.decode(endpoint, body: rawResponse.body)}))
      })
    }
  }
  @inlinable
  @discardableResult
  public func execute<E>(_ endpoint: E, completion: @escaping (EndpointResult<E>) -> Void) throws -> Task where E: Endpoint, E.RequestBody: CustomRequestBody, E.ResponseBody: CustomResponseBody {
    try executeRaw(endpoint) { result in
      completion(result.map { rawResponse in
        .init(response: rawResponse.response, body: .init(catching: {try self.decode(endpoint, body: rawResponse.body)}))
      })
    }
  }

  @inlinable
  @discardableResult
  public func execute<E>(_ endpoint: E, completion: @escaping (EndpointResult<E>) -> Void) throws -> Task where E: Endpoint, E.RequestBody == Void, E.ResponseBody: Decodable {
    try executeRaw(endpoint) { result in
      completion(result.map { rawResponse in
        .init(response: rawResponse.response, body: .init(catching: {try self.decode(endpoint, body: rawResponse.body)}))
      })
    }
  }
  @inlinable
  @discardableResult
  public func execute<E>(_ endpoint: E, completion: @escaping (EndpointResult<E>) -> Void) throws -> Task where E: Endpoint, E.RequestBody == Void, E.ResponseBody: CustomResponseBody {
    try executeRaw(endpoint) { result in
      completion(result.map { rawResponse in
        .init(response: rawResponse.response, body: .init(catching: {try self.decode(endpoint, body: rawResponse.body)}))
      })
    }
  }
}

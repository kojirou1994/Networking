
// #############################################################################
// #                                                                           #
// #            DO NOT EDIT THIS FILE; IT IS AUTOGENERATED.                    #
// #                                                                           #
// #############################################################################


import Foundation
import NIO

extension EventLoopFutureNetworking {

  @inlinable
  public func eventLoopFutureRaw<E>(_ endpoint: E) -> EventLoopFuture<RawResponse> where E: Endpoint, E.RequestBody == Void {
    do {
      return eventLoopFuture(try request(endpoint))
    } catch {
      return eventLoop.makeFailedFuture(error)
    }
  }

  @inlinable
  public func eventLoopFutureRaw<E>(_ endpoint: E) -> EventLoopFuture<RawResponse> where E: Endpoint, E.RequestBody: Encodable {
    do {
      return eventLoopFuture(try request(endpoint))
    } catch {
      return eventLoop.makeFailedFuture(error)
    }
  }

  @inlinable
  public func eventLoopFuture<E>(_ endpoint: E) -> EventLoopFuture<EndpointResponse<E>> where E: Endpoint, E.RequestBody: Encodable, E.ResponseBody: Decodable {
    eventLoopFutureRaw(endpoint)
      .map { rawResponse in
        .init(response: rawResponse.response, body: .init{try self.decode(endpoint, body: rawResponse.body)})
    }
  }

  @inlinable
  public func eventLoopFuture<E>(_ endpoint: E) -> EventLoopFuture<EndpointResponse<E>> where E: Endpoint, E.RequestBody: Encodable, E.ResponseBody: CustomResponseBody {
    eventLoopFutureRaw(endpoint)
      .map { rawResponse in
        .init(response: rawResponse.response, body: .init{try self.decode(endpoint, body: rawResponse.body)})
    }
  }

  @inlinable
  public func eventLoopFutureRaw<E>(_ endpoint: E) -> EventLoopFuture<RawResponse> where E: Endpoint, E.RequestBody: MultipartRequestBody {
    do {
      return eventLoopFuture(try request(endpoint))
    } catch {
      return eventLoop.makeFailedFuture(error)
    }
  }

  @inlinable
  public func eventLoopFuture<E>(_ endpoint: E) -> EventLoopFuture<EndpointResponse<E>> where E: Endpoint, E.RequestBody: MultipartRequestBody, E.ResponseBody: Decodable {
    eventLoopFutureRaw(endpoint)
      .map { rawResponse in
        .init(response: rawResponse.response, body: .init{try self.decode(endpoint, body: rawResponse.body)})
    }
  }

  @inlinable
  public func eventLoopFuture<E>(_ endpoint: E) -> EventLoopFuture<EndpointResponse<E>> where E: Endpoint, E.RequestBody: MultipartRequestBody, E.ResponseBody: CustomResponseBody {
    eventLoopFutureRaw(endpoint)
      .map { rawResponse in
        .init(response: rawResponse.response, body: .init{try self.decode(endpoint, body: rawResponse.body)})
    }
  }

  @inlinable
  public func eventLoopFutureRaw<E>(_ endpoint: E) -> EventLoopFuture<RawResponse> where E: Endpoint, E.RequestBody: StreamRequestBody {
    do {
      return eventLoopFuture(try request(endpoint))
    } catch {
      return eventLoop.makeFailedFuture(error)
    }
  }

  @inlinable
  public func eventLoopFuture<E>(_ endpoint: E) -> EventLoopFuture<EndpointResponse<E>> where E: Endpoint, E.RequestBody: StreamRequestBody, E.ResponseBody: Decodable {
    eventLoopFutureRaw(endpoint)
      .map { rawResponse in
        .init(response: rawResponse.response, body: .init{try self.decode(endpoint, body: rawResponse.body)})
    }
  }

  @inlinable
  public func eventLoopFuture<E>(_ endpoint: E) -> EventLoopFuture<EndpointResponse<E>> where E: Endpoint, E.RequestBody: StreamRequestBody, E.ResponseBody: CustomResponseBody {
    eventLoopFutureRaw(endpoint)
      .map { rawResponse in
        .init(response: rawResponse.response, body: .init{try self.decode(endpoint, body: rawResponse.body)})
    }
  }

  @inlinable
  public func eventLoopFutureRaw<E>(_ endpoint: E) -> EventLoopFuture<RawResponse> where E: Endpoint, E.RequestBody: CustomRequestBody {
    do {
      return eventLoopFuture(try request(endpoint))
    } catch {
      return eventLoop.makeFailedFuture(error)
    }
  }

  @inlinable
  public func eventLoopFuture<E>(_ endpoint: E) -> EventLoopFuture<EndpointResponse<E>> where E: Endpoint, E.RequestBody: CustomRequestBody, E.ResponseBody: Decodable {
    eventLoopFutureRaw(endpoint)
      .map { rawResponse in
        .init(response: rawResponse.response, body: .init{try self.decode(endpoint, body: rawResponse.body)})
    }
  }

  @inlinable
  public func eventLoopFuture<E>(_ endpoint: E) -> EventLoopFuture<EndpointResponse<E>> where E: Endpoint, E.RequestBody: CustomRequestBody, E.ResponseBody: CustomResponseBody {
    eventLoopFutureRaw(endpoint)
      .map { rawResponse in
        .init(response: rawResponse.response, body: .init{try self.decode(endpoint, body: rawResponse.body)})
    }
  }

  @inlinable
  public func eventLoopFuture<E>(_ endpoint: E) -> EventLoopFuture<EndpointResponse<E>> where E: Endpoint, E.RequestBody == Void, E.ResponseBody: Decodable {
    eventLoopFutureRaw(endpoint)
      .map { rawResponse in
        .init(response: rawResponse.response, body: .init{try self.decode(endpoint, body: rawResponse.body)})
    }
  }
  
  @inlinable
  public func eventLoopFuture<E>(_ endpoint: E) -> EventLoopFuture<EndpointResponse<E>> where E: Endpoint, E.RequestBody == Void, E.ResponseBody: CustomResponseBody {
    eventLoopFutureRaw(endpoint)
      .map { rawResponse in
        .init(response: rawResponse.response, body: .init{try self.decode(endpoint, body: rawResponse.body)})
    }
  }
  
}
